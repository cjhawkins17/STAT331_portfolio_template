---
title: "STAT 331 Portfolio"
author: "Christopher Hawkins"
format: 
  html: 
    self-contained: true
layout: margin-left
editor: visual
execute: 
  eval: false
  echo: true
code-fold: true
---

[**My Grade:**]{.underline} I believe my grade equivalent to course work evidenced below to be an A.

[**Learning Objective Evidence:**]{.underline} In the code chunks below, provide code from Lab or Challenge assignments where you believe you have demonstrated proficiency with the specified learning target. Be sure to specify **where** the code came from (e.g., Lab 4 Question 2).

## Working with Data

**WD-1: I can import data from a *variety* of formats (e.g., csv, xlsx, txt, etc.).**

-   `csv`

Lab 3 Question 2
```{r}
#| label: wd-1-csv
# code chunk for importing the data
teacher_evals <- read.csv(here("data", "teacher_evals.csv"))
```

-   `xlsx`

Practice Activity 4 Question 3
```{r}
#| label: wd-1-xlsx
military <- read_xlsx(here::here("data", 
                                 "gov_spending_per_capita.xlsx"), 
                      sheet = "Share of Govt. spending", 
                      skip  = 7, 
                      n_max = 191, 
                      na = c('NA','. .','xxx')
                      )
```

-   `txt`

Practice Activity 5 Question setup
```{r}
#| label: wd-1-txt
message_data <- read_csv("https://github.com/earobinson95/stat331-calpoly/raw/master/practice-activities/data/scrambled_message.txt",
                         show_col_types = FALSE)
```

**WD-2: I can select necessary columns from a dataset.**

Lab 3 Question 5
```{r}
#| label: wd-2
teacher_evals_clean <- teacher_evals |>
  rename("sex" = "gender") |>
  filter(no_participants >= 10) |>
  select(course_id,
         teacher_id,
         question_no,
         no_participants,
         resp_share,
         SET_score_avg,
         percent_failed_cur,
         academic_degree,
         seniority,
         sex) |>
  mutate(teacher_id = as.integer(teacher_id))
```

**WD-3: I can filter rows from a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   numeric

Lab 3 Question 5
```{r}
#| label: wd-3-numeric
teacher_evals_clean <- teacher_evals |>
  rename("sex" = "gender") |>
  filter(no_participants >= 10) |>
  select(course_id,
         teacher_id,
         question_no,
         no_participants,
         resp_share,
         SET_score_avg,
         percent_failed_cur,
         academic_degree,
         seniority,
         sex) |>
  mutate(teacher_id = as.integer(teacher_id))
```

-   character -- specifically a string (example must use functions from **stringr**)

Lab 5 Question Crime Scene Report
```{r}
#| label: wd-3-string
drivers_license |>
  inner_join(person, join_by("id" == "license_id")) |>
  filter(str_detect(plate_number, "H42W"))
```

-   factor

Lab 4 Question 2
```{r}
#| label: wd-3-factor
ca_childcare <- counties |>
  filter(state_name == "California") |>
  select(county_fips_code, county_name) |>
  inner_join(childcare_costs, join_by(county_fips_code == county_fips_code))
```

-   date (example must use functions from **lubridate**)

Lab 5 Crime Scene Report

*I made a revision to this code. I added the mutate line. I realized that I could parse the date column into a date variable to make it easier to read. This is important because I don't want readers to get confused when reading data.*
```{r}
#| label: wd-3-date
crime_scene_report |>
  mutate(date = ymd(date)) |>
  filter(city == "SQL City",
         date == ymd("20180115"))
```


**WD-4: I can modify existing variables and create new variables in a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   numeric (using `as.numeric()` is not sufficient)

Challenge 3 Question 1
```{r}
#| label: wd-4-numeric
teacher_evals_compare <- teacher_evals |>
  filter(question_no == 903) |>
  mutate(SET_level = if_else(condition = SET_score_avg >= 4,
                             true = "excellent",
                             false = "standard"),
         sen_level = if_else(condition = seniority <= 4,
                             true = "junior",
                             false = "senior")) |>
  select(course_id, SET_level, sen_level)
```

-   character -- specifically a string (example must use functions from **stringr**)

Lab 4 Question 3
```{r}
#| label: wd-4-string
ca_childcare <- ca_childcare |> 
  mutate(county_name = str_remove(county_name, " County")) |>
  mutate(region = fct_collapse(county_name,
                               "Superior California" = c("Butte", 
                                                         "Colusa", 
                                                         "El Dorado",
                                                         "Glenn",
                                                         "Lassen", 
                                                         "Modoc", 
                                                         "Nevada",
                                                         "Placer", 
                                                         "Plumas", 
                                                         "Sacramento", 
                                                         "Shasta", 
                                                         "Sierra", 
                                                         "Siskiyou",
                                                         "Sutter", 
                                                         "Tehama", 
                                                         "Yolo", 
                                                         "Yuba"),
                               "North Coast" = c("Del Norte", 
                                                 "Humboldt", 
                                                 "Lake", 
                                                 "Mendocino",
                                                 "Napa", 
                                                 "Sonoma", 
                                                 "Trinity"),
                               "San Francisco Bay Area" = c("Alameda",
                                                           "Contra Costa",
                                                           "Marin", 
                                                           "San Francisco",
                                                           "San Mateo",
                                                           "Santa Clara", 
                                                           "Solano"),
                               "Northern San Joaquin Valley" = c("Alpine", 
                                                                 "Amador", 
                                                                 "Calaveras", 
                                                                 "Madera", 
                                                                 "Mariposa",
                                                                 "Merced", 
                                                                 "Mono", 
                                                                 "San Joaquin",
                                                                 "Stanislaus", 
                                                                 "Tuolumne"),
                               "Central Coast" = c("Monterey",
                                                   "San Benito",
                                                   "San Luis Obispo",
                                                   "Santa Barbara",
                                                   "Santa Cruz",
                                                   "Ventura"),
                               "Southern San Joaquin Valley" = c("Fresno",
                                                                "Inyo",
                                                                "Kern",
                                                                "Kings",
                                                                "Tulare"),
                                "Inland Empire" = c("Riverside",
                                                   "San Bernardino"),
                               "Los Angeles County" = c("Los Angeles"),
                               "Orange County" = c("Orange"),
                               "San Diego-Imperial" = c("San Diego",
                                                        "Imperial")))
```

-   factor (example must use functions from **forcats**)

Lab 4 Question 3
```{r}
#| label: wd-4-factor
ca_childcare <- ca_childcare |> 
  mutate(county_name = str_remove(county_name, " County")) |>
  mutate(region = fct_collapse(county_name,
                               "Superior California" = c("Butte", 
                                                         "Colusa", 
                                                         "El Dorado",
                                                         "Glenn",
                                                         "Lassen", 
                                                         "Modoc", 
                                                         "Nevada",
                                                         "Placer", 
                                                         "Plumas", 
                                                         "Sacramento", 
                                                         "Shasta", 
                                                         "Sierra", 
                                                         "Siskiyou",
                                                         "Sutter", 
                                                         "Tehama", 
                                                         "Yolo", 
                                                         "Yuba"),
                               "North Coast" = c("Del Norte", 
                                                 "Humboldt", 
                                                 "Lake", 
                                                 "Mendocino",
                                                 "Napa", 
                                                 "Sonoma", 
                                                 "Trinity"),
                               "San Francisco Bay Area" = c("Alameda",
                                                           "Contra Costa",
                                                           "Marin", 
                                                           "San Francisco",
                                                           "San Mateo",
                                                           "Santa Clara", 
                                                           "Solano"),
                               "Northern San Joaquin Valley" = c("Alpine", 
                                                                 "Amador", 
                                                                 "Calaveras", 
                                                                 "Madera", 
                                                                 "Mariposa",
                                                                 "Merced", 
                                                                 "Mono", 
                                                                 "San Joaquin",
                                                                 "Stanislaus", 
                                                                 "Tuolumne"),
                               "Central Coast" = c("Monterey",
                                                   "San Benito",
                                                   "San Luis Obispo",
                                                   "Santa Barbara",
                                                   "Santa Cruz",
                                                   "Ventura"),
                               "Southern San Joaquin Valley" = c("Fresno",
                                                                "Inyo",
                                                                "Kern",
                                                                "Kings",
                                                                "Tulare"),
                                "Inland Empire" = c("Riverside",
                                                   "San Bernardino"),
                               "Los Angeles County" = c("Los Angeles"),
                               "Orange County" = c("Orange"),
                               "San Diego-Imperial" = c("San Diego",
                                                        "Imperial")))
```

-   date (example must use functions from **lubridate**)

Lab 5 Crime Scene Report

*Code Was updated to use date variable tpye instead of integer. This makes the code easier to read.*
```{r}
#| label: wd-4-date
crime_scene_report |>
  mutate(date = ymd(date)) |>
  filter(city == "SQL City",
         date == ymd("20180115"))
```

**WD-5: I can use mutating joins to combine multiple dataframes.**

-   `left_join()`

Lab 5 Question Clue 3

*The code was updated the use a left join. This is to make sure only the values from the person dateset that matches with the interview dataset gets joined.*
```{r}
#| label: wd-5-left
# look though the interviews
interview |>
  left_join(person, join_by("person_id" == "id")) |>
  filter(person_id %in% c(14887, 16371))
```

-   `right_join()`

Lab 5 Question Clue 4

*The code was updated to use a right_join(). This makes sure the values that joins from the drivers_license dataset matches with the values from the person dataset.*
```{r}
#| label: wd-5-right
drivers_license |>
  right_join(person, join_by("id" == "license_id")) |>
  filter(str_detect(plate_number, "H42W"))
```

-   `inner_join()`

Lab 5 Question Clue 5
```{r}
#| label: wd-5-inner
person |>
  inner_join(drivers_license,
             join_by("license_id" == "id")) |>
  inner_join(facebook_event_checkin,
             join_by("id" == "person_id")) |>
  filter(gender == "female",
         hair_color == "red",
         car_make == "Tesla",
         car_model == "Model S",
         event_name == "SQL Symphony Concert")
```

-   `full_join()`

Lab 4 Question 2

*The code was update to use a full_join(). This joins all the values from both datasets by the specified ID.*
```{r}
#| label: wd-5-full
ca_childcare <- counties |>
  filter(state_name == "California") |>
  select(county_fips_code, county_name) |>
  full_join(childcare_costs, join_by(county_fips_code == county_fips_code))
```

**WD-6: I can use filtering joins to filter rows from a dataframe.**

-   `semi_join()`

Lab 4 Question 2

*The code was updated to use semi_join() to make sure that the only childcare costs that are kept are the ones that match the counties from the counties dataset.*
```{r}
#| label: wd-6-semi
ca_childcare <- counties |>
  filter(state_name == "California") |>
  select(county_fips_code, county_name) |>
  semi_join(childcare_costs, by = "county_fips_code")
```

-   `anti_join()`

Lab 5 Question Crime Scene Report Clue 5

*Update was made to code to use anti_join() to filter for people in the dataset that do not have a valid drivers license.*
```{r}
#| label: wd-6-anti
people_without_license <- person |>
  anti_join(drivers_license, by = c("id" = "license_id"))
```

**WD-7: I can pivot dataframes from long to wide and visa versa**

-   `pivot_longer()`

Lab 4 Question 6
```{r}
#| label: wd-7-long
ca_childcare |>
  select(region, study_year, mc_infant, mc_toddler, mc_preschool) |>
  rename("California Region" = region) |>
  pivot_longer(cols = starts_with("mc_"),
               names_to = "age_group",
               values_to = "median_cost") |>
  mutate(age_group = fct_relevel(fct_recode(age_group,
                                          "Infant" = "mc_infant",
                                          "Toddler" = "mc_toddler",
                                          "Preschool" = "mc_preschool"),
                                "Infant",
                                "Toddler",
                                "Preschool")) |>
  mutate(`California Region` = fct_relevel(`California Region`,
                              "San Francisco Bay Area",
                              "Orange County",
                              "Los Angeles County",
                              "Northern San Joaquin Valley",
                              "Central Coast",
                              "Inland Empire",
                              "Superior California",
                              "Southern San Joaquin Valley",
                              "San Diego-Imperial",
                              "North Coast")) |>
  ggplot(mapping = aes(x = study_year,
                           y = median_cost,
                           color = `California Region`)) +
  geom_point(size = 0.5) +
  geom_smooth(linewidth = 0.5) +
  facet_wrap(~ age_group,
             labeller = label_value) +
  labs(subtitle = "Weekly Median Price for Center-Based Childcare ($)",
       x = "Study Year",
       y = "") +
  scale_x_continuous(breaks = seq(2008, 2018, by = 2),
                     minor_breaks = seq(2008, 2018, by = 1),
                     limits = c(2008, 2018)) +
  scale_y_continuous(breaks = seq(100, 500, by = 100),
                     minor_breaks = seq(100, 500, by = 50),
                     limits = c(100, 500)) +
  theme(
    aspect.ratio = 1, 
    axis.text.x = element_text(size = 6)
  )
```

-   `pivot_wider()`

Lab 4 Question 4
```{r}
#| label: wd-7-wide
ca_childcare |>
  filter(study_year %in% c("2008", "2018")) |>
  select(region, study_year, mhi_2018) |>
  group_by(region) |>
  pivot_wider(id_cols = region,
              names_from = study_year,
              values_from = mhi_2018,
              values_fn = median) |>
  arrange(desc(`2018`))
```

## Reproducibility

**R-1: I can create professional looking, reproducible analyses using RStudio projects, Quarto documents, and the here package.**

I've done this in the following provided assignments: Lab1, Lab2, Lab3, Lab4, Lab5

**R-2: I can write well documented and tidy code.**

-   Example of **ggplot2** plotting

Challenge 2 Question Medium
```{r}
#| label: r-2-1
library(ggridges)

ggplot(data = surveys,
       mapping = aes(x = weight,
                     y = species)) +
  geom_density_ridges(scale = 0.95, alpha = 0.75) +
  labs(title = "Distribution of weight for different rodent species",
       subtitle = "Species",
           x = "Weight [g]",
           y = "")
```

-   Example of **dplyr** pipeline

Lab 3 Question 9
```{r}
#| label: r-2-2
teacher_evals_clean |>
  group_by(course_id, teacher_id) |>
  summarize(count = n_distinct(question_no), .groups = "drop") |>
  filter(count == 9) |>
  count() 
```

-   Example of function formatting

```{r}
#| label: r-2-3

```

**R-3: I can write robust programs that are resistant to changes in inputs.**

-   Example -- any context

Lab 3 Question 11
```{r}
#| label: r-3-example
teacher_evals_clean |>
  filter(seniority == 1) |>
  group_by(teacher_id) |>
  summarize(avg_percent_failing = mean(percent_failed_cur), .groups = "drop") |>
  slice_max(avg_percent_failing)
```

-   Example of function stops

```{r}
#| label: r-3-function-stops

```

## Data Visualization & Summarization

**DVS-1: I can create visualizations for a *variety* of variable types (e.g., numeric, character, factor, date)**

-   at least two numeric variables

Lab 1 Question 6
```{r}
#| label: dvs-1-num
ToothGrowth %>% 
  mutate(dose = as.factor(dose)) %>% 
  ggplot(mapping = aes(x = dose, y = len)) +
  geom_boxplot() +
  labs(x = "Dose of Supplement (mg/day)", y = "Length of Teeth (mm)")
```

-   at least one numeric variable and one categorical variable

Lab 1 Question 6
```{r}
#| label: dvs-2-num-cat
ggplot(data = ToothGrowth, 
       mapping = aes(x = supp, y = len)) +
  geom_boxplot() +
  labs(x = "Supplement", y = "Length of Teeth (mm)")
```

-   at least two categorical variables

Lab 4 Question 6
```{r}
#| label: dvs-2-cat
ca_childcare |>
  select(region, study_year, mc_infant, mc_toddler, mc_preschool) |>
  rename("California Region" = region) |>
  pivot_longer(cols = starts_with("mc_"),
               names_to = "age_group",
               values_to = "median_cost") |>
  mutate(age_group = fct_relevel(fct_recode(age_group,
                                          "Infant" = "mc_infant",
                                          "Toddler" = "mc_toddler",
                                          "Preschool" = "mc_preschool"),
                                "Infant",
                                "Toddler",
                                "Preschool")) |>
  mutate(`California Region` = fct_relevel(`California Region`,
                              "San Francisco Bay Area",
                              "Orange County",
                              "Los Angeles County",
                              "Northern San Joaquin Valley",
                              "Central Coast",
                              "Inland Empire",
                              "Superior California",
                              "Southern San Joaquin Valley",
                              "San Diego-Imperial",
                              "North Coast")) |>
  ggplot(mapping = aes(x = study_year,
                           y = median_cost,
                           color = `California Region`)) +
  geom_point(size = 0.5) +
  geom_smooth(linewidth = 0.5) +
  facet_wrap(~ age_group,
             labeller = label_value) +
  labs(subtitle = "Weekly Median Price for Center-Based Childcare ($)",
       x = "Study Year",
       y = "") +
  scale_x_continuous(breaks = seq(2008, 2018, by = 2),
                     minor_breaks = seq(2008, 2018, by = 1),
                     limits = c(2008, 2018)) +
  scale_y_continuous(breaks = seq(100, 500, by = 100),
                     minor_breaks = seq(100, 500, by = 50),
                     limits = c(100, 500)) +
  theme(
    aspect.ratio = 1, 
    axis.text.x = element_text(size = 6),
    axis.text.y = element_text(size = 6),
  )
```

-   dates (timeseries plot)

Lab 5 Crime Scene Report
```{r}
#| label: dvs-2-date
crime_scene_report |>
  mutate(date = ymd(date)) |>
  filter(city == "SQL City",
         date == ymd("20180115"))
```

**DVS-2: I use plot modifications to make my visualization clear to the reader.**

-   I can ensure people don't tilt their head

Lab 4 Question 6
```{r}
#| label: dvs-2-1
ca_childcare |>
  select(region, study_year, mc_infant, mc_toddler, mc_preschool) |>
  rename("California Region" = region) |>
  pivot_longer(cols = starts_with("mc_"),
               names_to = "age_group",
               values_to = "median_cost") |>
  mutate(age_group = fct_relevel(fct_recode(age_group,
                                          "Infant" = "mc_infant",
                                          "Toddler" = "mc_toddler",
                                          "Preschool" = "mc_preschool"),
                                "Infant",
                                "Toddler",
                                "Preschool")) |>
  mutate(`California Region` = fct_relevel(`California Region`,
                              "San Francisco Bay Area",
                              "Orange County",
                              "Los Angeles County",
                              "Northern San Joaquin Valley",
                              "Central Coast",
                              "Inland Empire",
                              "Superior California",
                              "Southern San Joaquin Valley",
                              "San Diego-Imperial",
                              "North Coast")) |>
  ggplot(mapping = aes(x = study_year,
                           y = median_cost,
                           color = `California Region`)) +
  geom_point(size = 0.5) +
  geom_smooth(linewidth = 0.5) +
  facet_wrap(~ age_group,
             labeller = label_value) +
  labs(subtitle = "Weekly Median Price for Center-Based Childcare ($)",
       x = "Study Year",
       y = "") +
  scale_x_continuous(breaks = seq(2008, 2018, by = 2),
                     minor_breaks = seq(2008, 2018, by = 1),
                     limits = c(2008, 2018)) +
  scale_y_continuous(breaks = seq(100, 500, by = 100),
                     minor_breaks = seq(100, 500, by = 50),
                     limits = c(100, 500)) +
  theme(
    aspect.ratio = 1, 
    axis.text.x = element_text(size = 6),
    axis.text.y = element_text(size = 6),
  )
```

-   I can modify the text in my plot to be more readable

Lab 4 Question 6
```{r}
#| label: dvs-2-2
ca_childcare |>
  select(region, study_year, mc_infant, mc_toddler, mc_preschool) |>
  rename("California Region" = region) |>
  pivot_longer(cols = starts_with("mc_"),
               names_to = "age_group",
               values_to = "median_cost") |>
  mutate(age_group = fct_relevel(fct_recode(age_group,
                                          "Infant" = "mc_infant",
                                          "Toddler" = "mc_toddler",
                                          "Preschool" = "mc_preschool"),
                                "Infant",
                                "Toddler",
                                "Preschool")) |>
  mutate(`California Region` = fct_relevel(`California Region`,
                              "San Francisco Bay Area",
                              "Orange County",
                              "Los Angeles County",
                              "Northern San Joaquin Valley",
                              "Central Coast",
                              "Inland Empire",
                              "Superior California",
                              "Southern San Joaquin Valley",
                              "San Diego-Imperial",
                              "North Coast")) |>
  ggplot(mapping = aes(x = study_year,
                           y = median_cost,
                           color = `California Region`)) +
  geom_point(size = 0.5) +
  geom_smooth(linewidth = 0.5) +
  facet_wrap(~ age_group,
             labeller = label_value) +
  labs(subtitle = "Weekly Median Price for Center-Based Childcare ($)",
       x = "Study Year",
       y = "") +
  scale_x_continuous(breaks = seq(2008, 2018, by = 2),
                     minor_breaks = seq(2008, 2018, by = 1),
                     limits = c(2008, 2018)) +
  scale_y_continuous(breaks = seq(100, 500, by = 100),
                     minor_breaks = seq(100, 500, by = 50),
                     limits = c(100, 500)) +
  theme(
    aspect.ratio = 1, 
    axis.text.x = element_text(size = 6),
    axis.text.y = element_text(size = 6),
  )
```

-   I can reorder my legend to align with the colors in my plot

Challenge 3 Question 2

*I updated this question to make sure the values in the legend appear in the oder they appear on the plot.*
```{r}
#| label: dvs-2-3
library(ggplot2)

teacher_evals_compare |>
  mutate(SET_level = fct_relevel(SET_level,
                                 "excellent",
                                 "standard")) |>
  ggplot(mapping = aes(x = sen_level,
                       fill = SET_level)) +
  geom_bar(position = "stack",
           stat = "count") +
  scale_y_continuous(limits = c(0, 500)) +
  scale_fill_manual(values = c("blue", "orange")) +
  labs(title = "Number of Section",
       x = "Senority of Instructor",
       y = "") +
  theme(
    panel.background = element_blank(),
    panel.border = element_rect(color = "black", fill = NA),
    panel.grid.major = element_line(color = "gray80", size = 0.5),
    panel.grid.minor = element_line(color = "gray90", size = 0.25))
```

**DVS-3: I show creativity in my visualizations**

-   I can use non-standard colors

Challenge 2 Question Spicy
```{r}
#| label: dvs-3-1
ggplot(data = surveys,
       mapping = aes(x = weight,
                     y = species)) +
  geom_jitter(aes(color = genus), alpha = 0.60) +
  geom_boxplot(outliers = FALSE, alpha  = 0.00) +
  scale_color_manual(values = cdPalette_grey) + 
  labs(title = "Distribution of weight for different rodent species",
       subtitle = "Species",
           x = "Weight [g]",
           y = "")
```

-   I can use annotations

Challenge 2 Question Hot
```{r}
#| label: dvs-3-2
ggplot(data = surveys,
       mapping = aes(x = weight,
                     y = species)) +
  geom_jitter(aes(color = genus), alpha = 0.60) +
  geom_boxplot(outliers = FALSE, alpha  = 0.00) +
  scale_color_manual(values = cdPalette_grey) + 
  annotate("text", y = 1.3, x = 250, label = "Neotoma") +
  annotate("text", y = 2.3, x = 250, label = "Chaetodipus") +
  annotate("text", y = 3.3, x = 250, label = "Peromyscus") +
  annotate("text", y = 4.3, x = 250, label = "Perognathus") +
  annotate("text", y = 5.3, x = 250, label = "Reithrodontomys") +
  annotate("text", y = 6.3, x = 250, label = "Sigmodon") +
  annotate("text", y = 7.3, x = 250, label = "Onychomys") +
  annotate("text", y = 8.3, x = 250, label = "Peromyscus") +
  annotate("text", y = 9.3, x = 250, label = "Reithrodontomys") +
  annotate("text", y = 10.3, x = 250, label = "Dipodomys") +
  annotate("text", y = 11.3, x = 250, label = "Dipodomys") +
  annotate("text", y = 12.3, x = 250, label = "Chaetodipus") +
  annotate("text", y = 13.3, x = 250, label = "Dipodomys") +
  annotate("text", y = 14.3, x = 250, label = "Onychomys") +
  theme(legend.position = "none") +
  labs(title = "Distribution of weight for different rodent species",
       subtitle = "Species",
           x = "Weight [g]",
           y = "")
```

-   I can be creative...

Lab 4 Question 6
```{r}
#| label: dvs-3-3
ca_childcare |>
  select(region, study_year, mc_infant, mc_toddler, mc_preschool) |>
  rename("California Region" = region) |>
  pivot_longer(cols = starts_with("mc_"),
               names_to = "age_group",
               values_to = "median_cost") |>
  mutate(age_group = fct_relevel(fct_recode(age_group,
                                          "Infant" = "mc_infant",
                                          "Toddler" = "mc_toddler",
                                          "Preschool" = "mc_preschool"),
                                "Infant",
                                "Toddler",
                                "Preschool")) |>
  mutate(`California Region` = fct_relevel(`California Region`,
                              "San Francisco Bay Area",
                              "Orange County",
                              "Los Angeles County",
                              "Northern San Joaquin Valley",
                              "Central Coast",
                              "Inland Empire",
                              "Superior California",
                              "Southern San Joaquin Valley",
                              "San Diego-Imperial",
                              "North Coast")) |>
  ggplot(mapping = aes(x = study_year,
                           y = median_cost,
                           color = `California Region`)) +
  geom_point(size = 0.5) +
  geom_smooth(linewidth = 0.5) +
  facet_wrap(~ age_group,
             labeller = label_value) +
  labs(subtitle = "Weekly Median Price for Center-Based Childcare ($)",
       x = "Study Year",
       y = "") +
  scale_x_continuous(breaks = seq(2008, 2018, by = 2),
                     minor_breaks = seq(2008, 2018, by = 1),
                     limits = c(2008, 2018)) +
  scale_y_continuous(breaks = seq(100, 500, by = 100),
                     minor_breaks = seq(100, 500, by = 50),
                     limits = c(100, 500)) +
  theme(
    aspect.ratio = 1, 
    axis.text.x = element_text(size = 6),
    axis.text.y = element_text(size = 6),
  )
```

**DVS-4: I can calculate numerical summaries of variables.**

-   Example using `summarize()`

Lab 4 Question 5
```{r}
#| label: dvs-4-summarize
ca_childcare |>
  filter(study_year %in% c("2018")) |>
  select(region, study_year, mc_infant) |>
  group_by(region) |>
  summarise(mc_infant = median(mc_infant, na.rm = TRUE))
```

-   Example using `across()`

Lab 3 Question 8

*I modified my code to use Across in one pipeline instead of 3 separate one*
```{r}
#| label: dvs-4-across
combined_summary <- teacher_evals_clean |>
  group_by(across(c(seniority, academic_degree, sex))) |>
  summarise(count = n(), .groups = 'drop')
```

**DVS-5: I can find summaries of variables across multiple groups.**

-   Example 1

Lab 3 Question 8
```{r}
#| label: dvs-5-1
combined_summary <- teacher_evals_clean |>
  group_by(across(c(seniority, academic_degree, sex))) |>
  summarise(count = n(), .groups = 'drop')
```

-   Example 2

Lab 4 Question 5
```{r}
#| label: dvs-5-2
ca_childcare |>
  filter(study_year %in% c("2018")) |>
  select(region, study_year, mc_infant) |>
  group_by(region) |>
  summarise(mc_infant = median(mc_infant, na.rm = TRUE))
```

**DVS-6: I can create tables which make my summaries clear to the reader.**

-   Example 1

Lab 3 Question 6
```{r}
#| label: dvs-6-1
teacher_evals_clean |>
  summarise(n_distinct(teacher_id),
            n_distinct(course_id))
```

-   Example 2

Lab 4 Question 4
```{r}
#| label: dvs-6-2
ca_childcare |>
  filter(study_year %in% c("2008", "2018")) |>
  select(region, study_year, mhi_2018) |>
  group_by(region) |>
  pivot_wider(id_cols = region,
              names_from = study_year,
              values_from = mhi_2018,
              values_fn = median,
              names_glue = "year {study_year}") |>
  ungroup() |>
  arrange(desc(`year 2018`))
```

**DVS-7: I show creativity in my tables.**

-   Example 1

```{r}
#| label: dvs-7-1

```

-   Example 2

```{r}
#| label: dvs-7-2

```

## Program Efficiency

**PE-1: I can write concise code which does not repeat itself.**

-   using a single function call with multiple inputs (rather than multiple function calls)

Lab 3 Question 5
```{r}
#| label: pe-1-one-call
teacher_evals_clean <- teacher_evals |>
  rename("sex" = "gender") |>
  filter(no_participants >= 10) |>
  select(course_id,
         teacher_id,
         question_no,
         no_participants,
         resp_share,
         SET_score_avg,
         percent_failed_cur,
         academic_degree,
         seniority,
         sex) |>
  mutate(teacher_id = as.integer(teacher_id))
```

-   `across()`

Lab 3 Question 7

*I modified my code to use the across function. Using the across() function makes my code more streamline and efficient.*
```{r}
#| label: pe-1-across
teacher_evals_clean |> 
  filter(across(everything(), is.na))
```

-   `map()` functions

```{r}
#| label: pe-1-map-1

```

**PE-2: I can write functions to reduce repetition in my code.**

-   Function that operates on vectors

```{r}
#| label: pe-2-1

```

-   Function that operates on data frames

```{r}
#| label: pe-2-2

```

**PE-3:I can use iteration to reduce repetition in my code.**

-   `across()`

```{r}
#| label: pe-3-across

```

-   `map()` function with **one** input (e.g., `map()`, `map_chr()`, `map_dbl()`, etc.)

```{r}
#| label: pe-3-map-1

```

-   `map()` function with **more than one** input (e.g., `map_2()` or `pmap()`)

```{r}
#| label: pe-3-map-2

```

**PE-4: I can use modern tools when carrying out my analysis.**

-   I can use functions which are not superseded or deprecated

Lab 5 Question Crime Scene Report
```{r}
#| label: pe-4-1
get_fit_now_member |>
  filter(str_detect(id, "^48Z"),
         membership_status == "gold")
```

-   I can connect a data wrangling pipeline into a `ggplot()`

Lab 4 Question 6
```{r}
#| label: pe-4-2
ca_childcare |>
  select(region, study_year, mc_infant, mc_toddler, mc_preschool) |>
  rename("California Region" = region) |>
  pivot_longer(cols = starts_with("mc_"),
               names_to = "age_group",
               values_to = "median_cost") |>
  mutate(age_group = fct_relevel(fct_recode(age_group,
                                          "Infant" = "mc_infant",
                                          "Toddler" = "mc_toddler",
                                          "Preschool" = "mc_preschool"),
                                "Infant",
                                "Toddler",
                                "Preschool")) |>
  mutate(`California Region` = fct_relevel(`California Region`,
                              "San Francisco Bay Area",
                              "Orange County",
                              "Los Angeles County",
                              "Northern San Joaquin Valley",
                              "Central Coast",
                              "Inland Empire",
                              "Superior California",
                              "Southern San Joaquin Valley",
                              "San Diego-Imperial",
                              "North Coast")) |>
  ggplot(mapping = aes(x = study_year,
                           y = median_cost,
                           color = `California Region`)) +
  geom_point(size = 0.5) +
  geom_smooth(linewidth = 0.5) +
  facet_wrap(~ age_group,
             labeller = label_value) +
  labs(subtitle = "Weekly Median Price for Center-Based Childcare ($)",
       x = "Study Year",
       y = "") +
  scale_x_continuous(breaks = seq(2008, 2018, by = 2),
                     minor_breaks = seq(2008, 2018, by = 1),
                     limits = c(2008, 2018)) +
  scale_y_continuous(breaks = seq(100, 500, by = 100),
                     minor_breaks = seq(100, 500, by = 50),
                     limits = c(100, 500)) +
  theme(
    aspect.ratio = 1, 
    axis.text.x = element_text(size = 6),
    axis.text.y = element_text(size = 6),
  )
```

## Data Simulation & Statisical Models

**DSSM-1: I can simulate data from a *variety* of probability models.**

-   Example 1

```{r}
#| label: dsm-1-1

```

-   Example 2

```{r}
#| label: dsm-1-2

```

**DSSM-2: I can conduct common statistical analyses in R.**

-   Example 1

Lab 2 Question 17 & 18

*I updated this code chuck to use the pipe operator. This makes my code more efficient and more tidy.*
```{r}
#| label: dsm-2-1
aov(weight ~ factor(species), data = surveys) |>
summary()
```
Assume a critical value of 0.05, the p-value from the ANOVA test is 2*10^-16 which is less than 0.05. Therefore, the difference in group means is statistically significant. Reject the null hypothesis and support the alternative. Thus there is significant statistical data to support the alternative hypothesis that at least one rodent species has a different population mean weight.

-   Example 2

Lab 1 Question 12
```{r}
#| label: dsm-2-2
# Create a variable to hold supplement 1 data
VC <- ToothGrowth[1:30,1]
# Create a variable to hold supplement 2 data
OJ <- ToothGrowth[31:60,1]

# Assume unequal variances
# Assume two-sided alternative
testResults <- t.test(x = VC, y = OJ, alternative = "two.sided", var.equal = FALSE)

# Display the test results
print(testResults)
```

## Revising My Thinking

<!-- How did you revise your thinking throughout the course? How did you revise your thinking on the code examples you have provided in your portfolio? -->

I was able to revise my thinking via the revision that we were able to resubmit throughout the course. Once I received feedback, I would take a minute to internalize what the feedback was providing to me. Then I would do my best to apply the feedback to my code to improve it by making it more efficient or tidy. When I code, there are infinite ways to accomplish a task. But while working on my portfolio, I got to think about different ways I could have executed my code. And in doing so, some of the new ways I discovered made my code better / more efficient.

<!-- For the revisions included in your Portfolio, to help me understand the nature of your revisions, please denote somehow the feedback I provided you (e.g., boldface, italics, colored text) before your revisions. -->

I noted this by making the text *italicized*

## Extending My Thinking

<!-- How did you extended your thinking throughout the course? How did you extend your thinking on the code examples you have provided in your portfolio? -->

I extended my thinking as much as I could be doing all the challenge activities. These push me to look into more of the specifics of how to use R. For example created the plot in challenge 2 really taught me how to use ggplot and get the most out of it to customize a plot to be exactly as I want it. Additionally, the challenge activities made me more comfortable with R as a language; so when I use it in the future, I already have the knowledge to apply  what I've learned by doing the challenge activities.

## Peer Support & Collaboration

<!-- Include an image or a description of feedback you gave that you are proud of (either in a peer review or in Discord). -->

"Hi Eva, great job being very efficient with you code. For the most part you use one function to output all the necessary values. One recommendation I have is sometimes you don't need to store your manipulation in a variable, you can just have it outputted instead of using print(). You also did a great job with writing tidy code. I like your use of comment for almost every line - it makes it super easy to read. you were also consistent with variable spacing. One recommendation would be to use named attributed in all locations. otherwise, great job!"
Christopher John Hawkins , Oct 20 at 1:01pm Lab 3 Code Review.

<!-- Include a description of how you grew as a collaborator through the weekly pair programming activities.   -->

Through collaborating with the weekly programming activities, I learned how to better communicate about code to others. At first I had a hard time getting my thoughts and ideas across. But as I had more and more opportunists to try, I eventually got better and now my partner and I are able to bounce ideas off each other and work very effectively. I also learned  to understand what other people are trying to convey and translate those ideas into code. This helped me grew because not only did I learn how to efficiently develop code as a team, but also learn about new ways of thinking about the code and different techniques that I can incorporate into my own code.