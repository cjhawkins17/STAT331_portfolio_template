---
title: "STAT 331 Portfolio"
author: "Christopher Hawkins"
format: 
  html: 
    self-contained: true
layout: margin-left
editor: visual
execute: 
  eval: false
  echo: true
code-tools: true
---

[**My Grade:**]{.underline} I believe my grade equivalent to course work evidenced below to be an A-.

[**Learning Objective Evidence:**]{.underline} In the code chunks below, provide code from Lab or Challenge assignments where you believe you have demonstrated proficiency with the specified learning target. Be sure to specify **where** the code came from (e.g., Lab 4 Question 2).

## Working with Data

**WD-1: I can import data from a *variety* of formats (e.g., csv, xlsx, txt, etc.).**

-   `csv`

Lab 3 Question 2

```{r}
#| label: wd-1-csv
# code chunk for importing the data
teacher_evals <- read.csv(here("data", "teacher_evals.csv"))
```

-   `xlsx`

Practice Activity 4 Question 3

```{r}
#| label: wd-1-xlsx
military <- read_xlsx(here::here("data", 
                                 "gov_spending_per_capita.xlsx"), 
                      sheet = "Share of Govt. spending", 
                      skip  = 7, 
                      n_max = 191, 
                      na = c('NA','. .','xxx')
                      )
```

-   `txt`

Practice Activity 5 Question setup

```{r}
#| label: wd-1-txt
message_data <- read_tsv("https://github.com/earobinson95/stat331-calpoly/raw/master/practice-activities/data/scrambled_message.txt",
                         show_col_types = FALSE)
```

**WD-2: I can select necessary columns from a dataset.**

Lab 3 Question 5

```{r}
#| label: wd-2
teacher_evals_clean <- teacher_evals |>
  rename("sex" = "gender") |>
  filter(no_participants >= 10) |>
  select(course_id,
         teacher_id,
         question_no,
         no_participants,
         resp_share,
         SET_score_avg,
         percent_failed_cur,
         academic_degree,
         seniority,
         sex) |>
  mutate(teacher_id = as.integer(teacher_id))
```

**WD-3: I can filter rows from a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   numeric

Lab 3 Question 5

```{r}
#| label: wd-3-numeric
teacher_evals_clean <- teacher_evals |>
  rename("sex" = "gender") |>
  filter(no_participants >= 10) |>
  select(course_id,
         teacher_id,
         question_no,
         no_participants,
         resp_share,
         SET_score_avg,
         percent_failed_cur,
         academic_degree,
         seniority,
         sex) |>
  mutate(teacher_id = as.integer(teacher_id))
```

-   character -- specifically a string (example must use functions from **stringr**)

Lab 5 Question Crime Scene Report

```{r}
#| label: wd-3-string
drivers_license |>
  inner_join(person, join_by("id" == "license_id")) |>
  filter(str_detect(plate_number, "H42W"))
```

-   factor

Lab 4 Question 2

```{r}
#| label: wd-3-factor
ca_childcare <- counties |>
  filter(state_name == "California") |>
  select(county_fips_code, county_name) |>
  inner_join(childcare_costs, join_by(county_fips_code == county_fips_code))
```

-   date (example must use functions from **lubridate**)

Lab 5 Crime Scene Report

*I made a revision to this code. I added the mutate line. I realized that I could parse the date column into a date variable to make it easier to read. This is important because I don't want readers to get confused when reading data.*

```{r}
#| label: wd-3-date
crime_scene_report |>
  mutate(date = ymd(date)) |>
  filter(city == "SQL City",
         date == ymd("20180115"))
```

**WD-4: I can modify existing variables and create new variables in a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   numeric (using `as.numeric()` is not sufficient)

Challenge 3 Question 1

```{r}
#| label: wd-4-numeric
teacher_evals_compare <- teacher_evals |>
  filter(question_no == 903) |>
  mutate(SET_level = if_else(condition = SET_score_avg >= 4,
                             true = "excellent",
                             false = "standard"),
         sen_level = if_else(condition = seniority <= 4,
                             true = "junior",
                             false = "senior")) |>
  select(course_id, SET_level, sen_level)
```

-   character -- specifically a string (example must use functions from **stringr**)

Lab 4 Question 3

```{r}
#| label: wd-4-string
ca_childcare <- ca_childcare |> 
  mutate(county_name = str_remove(county_name, " County")) |>
  mutate(region = fct_collapse(county_name,
                               "Superior California" = c("Butte", 
                                                         "Colusa", 
                                                         "El Dorado",
                                                         "Glenn",
                                                         "Lassen", 
                                                         "Modoc", 
                                                         "Nevada",
                                                         "Placer", 
                                                         "Plumas", 
                                                         "Sacramento", 
                                                         "Shasta", 
                                                         "Sierra", 
                                                         "Siskiyou",
                                                         "Sutter", 
                                                         "Tehama", 
                                                         "Yolo", 
                                                         "Yuba"),
                               "North Coast" = c("Del Norte", 
                                                 "Humboldt", 
                                                 "Lake", 
                                                 "Mendocino",
                                                 "Napa", 
                                                 "Sonoma", 
                                                 "Trinity"),
                               "San Francisco Bay Area" = c("Alameda",
                                                           "Contra Costa",
                                                           "Marin", 
                                                           "San Francisco",
                                                           "San Mateo",
                                                           "Santa Clara", 
                                                           "Solano"),
                               "Northern San Joaquin Valley" = c("Alpine", 
                                                                 "Amador", 
                                                                 "Calaveras", 
                                                                 "Madera", 
                                                                 "Mariposa",
                                                                 "Merced", 
                                                                 "Mono", 
                                                                 "San Joaquin",
                                                                 "Stanislaus", 
                                                                 "Tuolumne"),
                               "Central Coast" = c("Monterey",
                                                   "San Benito",
                                                   "San Luis Obispo",
                                                   "Santa Barbara",
                                                   "Santa Cruz",
                                                   "Ventura"),
                               "Southern San Joaquin Valley" = c("Fresno",
                                                                "Inyo",
                                                                "Kern",
                                                                "Kings",
                                                                "Tulare"),
                                "Inland Empire" = c("Riverside",
                                                   "San Bernardino"),
                               "Los Angeles County" = c("Los Angeles"),
                               "Orange County" = c("Orange"),
                               "San Diego-Imperial" = c("San Diego",
                                                        "Imperial")))
```

-   factor (example must use functions from **forcats**)

Lab 4 Question 3

```{r}
#| label: wd-4-factor
ca_childcare <- ca_childcare |> 
  mutate(county_name = str_remove(county_name, " County")) |>
  mutate(region = fct_collapse(county_name,
                               "Superior California" = c("Butte", 
                                                         "Colusa", 
                                                         "El Dorado",
                                                         "Glenn",
                                                         "Lassen", 
                                                         "Modoc", 
                                                         "Nevada",
                                                         "Placer", 
                                                         "Plumas", 
                                                         "Sacramento", 
                                                         "Shasta", 
                                                         "Sierra", 
                                                         "Siskiyou",
                                                         "Sutter", 
                                                         "Tehama", 
                                                         "Yolo", 
                                                         "Yuba"),
                               "North Coast" = c("Del Norte", 
                                                 "Humboldt", 
                                                 "Lake", 
                                                 "Mendocino",
                                                 "Napa", 
                                                 "Sonoma", 
                                                 "Trinity"),
                               "San Francisco Bay Area" = c("Alameda",
                                                           "Contra Costa",
                                                           "Marin", 
                                                           "San Francisco",
                                                           "San Mateo",
                                                           "Santa Clara", 
                                                           "Solano"),
                               "Northern San Joaquin Valley" = c("Alpine", 
                                                                 "Amador", 
                                                                 "Calaveras", 
                                                                 "Madera", 
                                                                 "Mariposa",
                                                                 "Merced", 
                                                                 "Mono", 
                                                                 "San Joaquin",
                                                                 "Stanislaus", 
                                                                 "Tuolumne"),
                               "Central Coast" = c("Monterey",
                                                   "San Benito",
                                                   "San Luis Obispo",
                                                   "Santa Barbara",
                                                   "Santa Cruz",
                                                   "Ventura"),
                               "Southern San Joaquin Valley" = c("Fresno",
                                                                "Inyo",
                                                                "Kern",
                                                                "Kings",
                                                                "Tulare"),
                                "Inland Empire" = c("Riverside",
                                                   "San Bernardino"),
                               "Los Angeles County" = c("Los Angeles"),
                               "Orange County" = c("Orange"),
                               "San Diego-Imperial" = c("San Diego",
                                                        "Imperial")))
```

-   date (example must use functions from **lubridate**)

Lab 5 Crime Scene Report

*Code Was updated to use date variable tpye instead of integer. This makes the code easier to read.*

```{r}
#| label: wd-4-date
crime_scene_report |>
  mutate(date = ymd(date)) |>
  filter(city == "SQL City",
         date == ymd("20180115"))
```

**WD-5: I can use mutating joins to combine multiple dataframes.**

-   `left_join()`

Lab 4 Question 2

*The code was updated to use a left join. I did this becuase I wanted to pull datasets together. I had one with all the CA counties. Then I wanted to add the childcare_costs data set without loosing any of the data from the counties dataset.*

```{r}

ca_childcare <- counties |>
  filter(state_name == "California") |>
  select(county_fips_code, county_name) |>
  left_join(childcare_costs, join_by(county_fips_code == county_fips_code))
```

-   `right_join()`

Lab 5 Question Clue 4

*The code was updated to use a right_join(). In this case, I want to keep all the data from the person dataset and add the data that matches from the drivers_license dataset. I used a right_join but could have used left join if I flip the order of the datasets.*

```{r}
#| label: wd-5-right
drivers_license |>
  right_join(person, join_by("id" == "license_id")) |>
  filter(str_detect(plate_number, "H42W"))
```

-   `inner_join()`

Lab 5 Question Clue 5

```{r}
#| label: wd-5-inner
person |>
  inner_join(drivers_license,
             join_by("license_id" == "id")) |>
  inner_join(facebook_event_checkin,
             join_by("id" == "person_id")) |>
  filter(gender == "female",
         hair_color == "red",
         car_make == "Tesla",
         car_model == "Model S",
         event_name == "SQL Symphony Concert")
```

-   `full_join()`

Lab 4 Question 2

*The code was update to use a full_join(). This joins all the values from both datasets by the specified ID.*

```{r}
#| label: wd-5-full
ca_childcare <- counties |>
  filter(state_name == "California") |>
  select(county_fips_code, county_name) |>
  full_join(childcare_costs, join_by(county_fips_code == county_fips_code))
```

**WD-6: I can use filtering joins to filter rows from a dataframe.**

-   `semi_join()`

Lab 5 Question Clue 3

*The code was updated to use semi_join(). I used a semi join because I was interested in the interview from the people in the witness dataset. I was not concerned with the information in the witness dataset so I used semi_join() to display only the interview from poeple that were in the witness dataset.*

```{r}
#| label: wd-6-semi
witness_interviews <- interview |>
  semi_join(witnesses, by = c("person_id" = "id"))
```

-   `anti_join()`

Lab 5 Question Crime Scene Report Clue 4

*Update was made to code to use anti_join(). I wanted to use anti_join() to filter for person that were not in the facebook_event_checkin dataset. This allowed me to see which people were not at the event and could not be the suspect. anti_join works by renterning the data from from both datasets in which there are not matches.*

```{r}
#| label: wd-6-anti
person |>
  anti_join(facebook_event_checkin, by = c("id" = "person_id"))
```

**WD-7: I can pivot dataframes from long to wide and visa versa**

-   `pivot_longer()`

Lab 4 Question 6

```{r}
#| label: wd-7-long
ca_childcare |>
  select(region, study_year, mc_infant, mc_toddler, mc_preschool) |>
  rename("California Region" = region) |>
  pivot_longer(cols = starts_with("mc_"),
               names_to = "age_group",
               values_to = "median_cost") |>
  mutate(age_group = fct_relevel(fct_recode(age_group,
                                          "Infant" = "mc_infant",
                                          "Toddler" = "mc_toddler",
                                          "Preschool" = "mc_preschool"),
                                "Infant",
                                "Toddler",
                                "Preschool")) |>
  mutate(`California Region` = fct_relevel(`California Region`,
                              "San Francisco Bay Area",
                              "Orange County",
                              "Los Angeles County",
                              "Northern San Joaquin Valley",
                              "Central Coast",
                              "Inland Empire",
                              "Superior California",
                              "Southern San Joaquin Valley",
                              "San Diego-Imperial",
                              "North Coast")) |>
  ggplot(mapping = aes(x = study_year,
                           y = median_cost,
                           color = `California Region`)) +
  geom_point(size = 0.5) +
  geom_smooth(linewidth = 0.5) +
  facet_wrap(~ age_group,
             labeller = label_value) +
  labs(subtitle = "Weekly Median Price for Center-Based Childcare ($)",
       x = "Study Year",
       y = "") +
  scale_x_continuous(breaks = seq(2008, 2018, by = 2),
                     minor_breaks = seq(2008, 2018, by = 1),
                     limits = c(2008, 2018)) +
  scale_y_continuous(breaks = seq(100, 500, by = 100),
                     minor_breaks = seq(100, 500, by = 50),
                     limits = c(100, 500)) +
  theme(
    aspect.ratio = 1, 
    axis.text.x = element_text(size = 6)
  )
```

-   `pivot_wider()`

Lab 4 Question 4

```{r}
#| label: wd-7-wide
ca_childcare |>
  filter(study_year %in% c("2008", "2018")) |>
  select(region, study_year, mhi_2018) |>
  group_by(region) |>
  pivot_wider(id_cols = region,
              names_from = study_year,
              values_from = mhi_2018,
              values_fn = median) |>
  arrange(desc(`2018`))
```

## Reproducibility

**R-1: I can create professional looking, reproducible analyses using RStudio projects, Quarto documents, and the here package.**

I've done this in the following provided assignments:  Lab5 and Lab9

**R-2: I can write well documented and tidy code.**

-   Example of **ggplot2** plotting

Challenge 2 Question Medium

```{r}
#| label: r-2-1
library(ggridges)

ggplot(data = surveys,
       mapping = aes(x = weight,
                     y = species)) +
  geom_density_ridges(scale = 0.95, alpha = 0.75) +
  labs(title = "Distribution of weight for different rodent species",
       subtitle = "Species",
           x = "Weight [g]",
           y = "")
```

-   Example of **dplyr** pipeline

Lab 3 Question 9

```{r}
#| label: r-2-2
teacher_evals_clean |>
  group_by(course_id, teacher_id) |>
  summarize(count = n_distinct(question_no), .groups = "drop") |>
  filter(count == 9) |>
  count() 
```

-   Example of function formatting

Lab 9 Question 1

```{r}
#| label: r-2-3

randomBabies <- function(nBabies) {
  # Create a vector representing the parents
  parents <- 1:nBabies
  
  # Shuffle the babies randomly
  babies <- sample(parents)
  
  # Count how many babies are correctly returned
  sum(parents == babies)
}
```

**R-3: I can write robust programs that are resistant to changes in inputs.**

-   Example -- any context

Lab 3 Question 11

```{r}
#| label: r-3-example
teacher_evals_clean |>
  filter(seniority == 1) |>
  group_by(teacher_id) |>
  summarize(avg_percent_failing = mean(percent_failed_cur), .groups = "drop") |>
  slice_max(avg_percent_failing)
```

-   Example of function stops

Lab 9 Question 1

*Update was made to code to add a function stop. This is important becuase I do not want to write code that beaks if the input from a user is not correct. This fuction stop checks if the input to the function is an integer and if not leaves a message inofrming the user.*

```{r}
#| label: r-3-function-stops

randomBabies <- function(nBabies) {
  # Check if nBabies is an integer
  if (!is.integer(nBabies)) {
    stop("nBabies must be an integer.")
  }

  # Create a vector representing the parents
  parents <- 1:nBabies

  # Shuffle the babies randomly
  babies <- sample(parents)

  # Count how many babies are correctly returned
  sum(parents == babies)
}
```

## Data Visualization & Summarization

**DVS-1: I can create visualizations for a *variety* of variable types (e.g., numeric, character, factor, date)**

-   at least two numeric variables

Lab 1 Question 6

```{r}
#| label: dvs-1-num
ToothGrowth %>% 
  mutate(dose = as.factor(dose)) %>% 
  ggplot(mapping = aes(x = dose, y = len)) +
  geom_boxplot() +
  labs(x = "Dose of Supplement (mg/day)", y = "Length of Teeth (mm)")
```

-   at least one numeric variable and one categorical variable

Lab 1 Question 6

```{r}
#| label: dvs-2-num-cat
ggplot(data = ToothGrowth, 
       mapping = aes(x = supp, y = len)) +
  geom_boxplot() +
  labs(x = "Supplement", y = "Length of Teeth (mm)")
```

-   at least two categorical variables

Lab 4 Question 6

```{r}
#| label: dvs-2-cat
ca_childcare |>
  select(region, study_year, mc_infant, mc_toddler, mc_preschool) |>
  rename("California Region" = region) |>
  pivot_longer(cols = starts_with("mc_"),
               names_to = "age_group",
               values_to = "median_cost") |>
  mutate(age_group = fct_relevel(fct_recode(age_group,
                                          "Infant" = "mc_infant",
                                          "Toddler" = "mc_toddler",
                                          "Preschool" = "mc_preschool"),
                                "Infant",
                                "Toddler",
                                "Preschool")) |>
  mutate(`California Region` = fct_relevel(`California Region`,
                              "San Francisco Bay Area",
                              "Orange County",
                              "Los Angeles County",
                              "Northern San Joaquin Valley",
                              "Central Coast",
                              "Inland Empire",
                              "Superior California",
                              "Southern San Joaquin Valley",
                              "San Diego-Imperial",
                              "North Coast")) |>
  ggplot(mapping = aes(x = study_year,
                           y = median_cost,
                           color = `California Region`)) +
  geom_point(size = 0.5) +
  geom_smooth(linewidth = 0.5) +
  facet_wrap(~ age_group,
             labeller = label_value) +
  labs(subtitle = "Weekly Median Price for Center-Based Childcare ($)",
       x = "Study Year",
       y = "") +
  scale_x_continuous(breaks = seq(2008, 2018, by = 2),
                     minor_breaks = seq(2008, 2018, by = 1),
                     limits = c(2008, 2018)) +
  scale_y_continuous(breaks = seq(100, 500, by = 100),
                     minor_breaks = seq(100, 500, by = 50),
                     limits = c(100, 500)) +
  theme(
    aspect.ratio = 1, 
    axis.text.x = element_text(size = 6),
    axis.text.y = element_text(size = 6),
  )
```

-   dates (timeseries plot)

Lab 5 Crime Scene Report

```{r}
#| label: dvs-2-date
crime_scene_report |>
  mutate(date = ymd(date)) |>
  filter(city == "SQL City",
         date == ymd("20180115"))
```

**DVS-2: I use plot modifications to make my visualization clear to the reader.**

-   I can ensure people don't tilt their head

Lab 4 Question 6

```{r}
#| label: dvs-2-1
ca_childcare |>
  select(region, study_year, mc_infant, mc_toddler, mc_preschool) |>
  rename("California Region" = region) |>
  pivot_longer(cols = starts_with("mc_"),
               names_to = "age_group",
               values_to = "median_cost") |>
  mutate(age_group = fct_relevel(fct_recode(age_group,
                                          "Infant" = "mc_infant",
                                          "Toddler" = "mc_toddler",
                                          "Preschool" = "mc_preschool"),
                                "Infant",
                                "Toddler",
                                "Preschool")) |>
  mutate(`California Region` = fct_relevel(`California Region`,
                              "San Francisco Bay Area",
                              "Orange County",
                              "Los Angeles County",
                              "Northern San Joaquin Valley",
                              "Central Coast",
                              "Inland Empire",
                              "Superior California",
                              "Southern San Joaquin Valley",
                              "San Diego-Imperial",
                              "North Coast")) |>
  ggplot(mapping = aes(x = study_year,
                           y = median_cost,
                           color = `California Region`)) +
  geom_point(size = 0.5) +
  geom_smooth(linewidth = 0.5) +
  facet_wrap(~ age_group,
             labeller = label_value) +
  labs(subtitle = "Weekly Median Price for Center-Based Childcare ($)",
       x = "Study Year",
       y = "") +
  scale_x_continuous(breaks = seq(2008, 2018, by = 2),
                     minor_breaks = seq(2008, 2018, by = 1),
                     limits = c(2008, 2018)) +
  scale_y_continuous(breaks = seq(100, 500, by = 100),
                     minor_breaks = seq(100, 500, by = 50),
                     limits = c(100, 500)) +
  theme(
    aspect.ratio = 1, 
    axis.text.x = element_text(size = 6),
    axis.text.y = element_text(size = 6),
  )
```

-   I can modify the text in my plot to be more readable

Lab 4 Question 6

```{r}
#| label: dvs-2-2
ca_childcare |>
  select(region, study_year, mc_infant, mc_toddler, mc_preschool) |>
  rename("California Region" = region) |>
  pivot_longer(cols = starts_with("mc_"),
               names_to = "age_group",
               values_to = "median_cost") |>
  mutate(age_group = fct_relevel(fct_recode(age_group,
                                          "Infant" = "mc_infant",
                                          "Toddler" = "mc_toddler",
                                          "Preschool" = "mc_preschool"),
                                "Infant",
                                "Toddler",
                                "Preschool")) |>
  mutate(`California Region` = fct_relevel(`California Region`,
                              "San Francisco Bay Area",
                              "Orange County",
                              "Los Angeles County",
                              "Northern San Joaquin Valley",
                              "Central Coast",
                              "Inland Empire",
                              "Superior California",
                              "Southern San Joaquin Valley",
                              "San Diego-Imperial",
                              "North Coast")) |>
  ggplot(mapping = aes(x = study_year,
                           y = median_cost,
                           color = `California Region`)) +
  geom_point(size = 0.5) +
  geom_smooth(linewidth = 0.5) +
  facet_wrap(~ age_group,
             labeller = label_value) +
  labs(subtitle = "Weekly Median Price for Center-Based Childcare ($)",
       x = "Study Year",
       y = "") +
  scale_x_continuous(breaks = seq(2008, 2018, by = 2),
                     minor_breaks = seq(2008, 2018, by = 1),
                     limits = c(2008, 2018)) +
  scale_y_continuous(breaks = seq(100, 500, by = 100),
                     minor_breaks = seq(100, 500, by = 50),
                     limits = c(100, 500)) +
  theme(
    aspect.ratio = 1, 
    axis.text.x = element_text(size = 6),
    axis.text.y = element_text(size = 6),
  )
```

-   I can reorder my legend to align with the colors in my plot

Challenge 3 Question 2

*I updated this question to make sure the values in the legend appear in the oder they appear on the plot.*

```{r}
#| label: dvs-2-3
library(ggplot2)

teacher_evals_compare |>
  mutate(SET_level = fct_relevel(SET_level,
                                 "excellent",
                                 "standard")) |>
  ggplot(mapping = aes(x = sen_level,
                       fill = SET_level)) +
  geom_bar(position = "stack",
           stat = "count") +
  scale_y_continuous(limits = c(0, 500)) +
  scale_fill_manual(values = c("blue", "orange")) +
  labs(title = "Number of Section",
       x = "Senority of Instructor",
       y = "") +
  theme(
    panel.background = element_blank(),
    panel.border = element_rect(color = "black", fill = NA),
    panel.grid.major = element_line(color = "gray80", size = 0.5),
    panel.grid.minor = element_line(color = "gray90", size = 0.25))
```

**DVS-3: I show creativity in my visualizations**

-   I can use non-standard colors

Challenge 2 Question Spicy

*Update to use my own color package (https://www.rdocumentation.org/packages/viridis/versions/0.2.5/topics/scale_color_viridis) to create a more unique plot*

```{r}
#| label: dvs-3-1

library(viridis)
ggplot(data = surveys,
       mapping = aes(x = weight,
                     y = species)) +
geom_jitter(aes(color = genus), alpha = 0.60) +
geom_boxplot(outliers = FALSE, alpha = 0.00) +
scale_color_viridis(discrete = TRUE) +
labs(title = "Distribution of weight for different rodent species",
     subtitle = "Species",
     x = "Weight [g]",
     y = "")
```

-   I can use annotations

Challenge 2 Question Hot

```{r}
#| label: dvs-3-2
ggplot(data = surveys,
       mapping = aes(x = weight,
                     y = species)) +
  geom_jitter(aes(color = genus), alpha = 0.60) +
  geom_boxplot(outliers = FALSE, alpha  = 0.00) +
  scale_color_manual(values = cdPalette_grey) + 
  annotate("text", y = 1.3, x = 250, label = "Neotoma") +
  annotate("text", y = 2.3, x = 250, label = "Chaetodipus") +
  annotate("text", y = 3.3, x = 250, label = "Peromyscus") +
  annotate("text", y = 4.3, x = 250, label = "Perognathus") +
  annotate("text", y = 5.3, x = 250, label = "Reithrodontomys") +
  annotate("text", y = 6.3, x = 250, label = "Sigmodon") +
  annotate("text", y = 7.3, x = 250, label = "Onychomys") +
  annotate("text", y = 8.3, x = 250, label = "Peromyscus") +
  annotate("text", y = 9.3, x = 250, label = "Reithrodontomys") +
  annotate("text", y = 10.3, x = 250, label = "Dipodomys") +
  annotate("text", y = 11.3, x = 250, label = "Dipodomys") +
  annotate("text", y = 12.3, x = 250, label = "Chaetodipus") +
  annotate("text", y = 13.3, x = 250, label = "Dipodomys") +
  annotate("text", y = 14.3, x = 250, label = "Onychomys") +
  theme(legend.position = "none") +
  labs(title = "Distribution of weight for different rodent species",
       subtitle = "Species",
           x = "Weight [g]",
           y = "")
```

-   I can be creative...

Lab 7 Question 2

```{r}
#| label: dvs-3-3

# Summarize data to count missing values in 'weight' by 'year', 'section', and 'trip'
data |>
  group_by(year, section, trip) |>
  summarize(missing_weight = sum(is.na(weight)), .groups = "drop") |>
  # Create a combined label for year and trip
  mutate(year_trip = paste(year, trip, sep = "-")) |>
# Plotting the data
ggplot(mapping = aes(x = missing_weight, y = year_trip, fill = section)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(
    title = "Count of Missing Values in Weight by Year, Section, and Trip",
    subtitle = "Year-Trip #",
    x = "Count of Missing Weight Values",
    y = "",
    fill = "Section"
  ) +
  theme_minimal()
```

**DVS-4: I can calculate numerical summaries of variables.**

-   Example using `summarize()`

Lab 4 Question 5

```{r}
#| label: dvs-4-summarize
ca_childcare |>
  filter(study_year %in% c("2018")) |>
  select(region, study_year, mc_infant) |>
  group_by(region) |>
  summarise(mc_infant = median(mc_infant, na.rm = TRUE))
```

-   Example using `across()`

Lab 3 Question 8

*I modified my code to use Across in one pipeline instead of 3 separate one*

```{r}
#| label: dvs-4-across
combined_summary <- teacher_evals_clean |>
  group_by(across(c(seniority, academic_degree, sex))) |>
  summarise(count = n(), .groups = 'drop')
```

**DVS-5: I can find summaries of variables across multiple groups.**

-   Example 1

Lab 3 Question 8

```{r}
#| label: dvs-5-1
combined_summary <- teacher_evals_clean |>
  group_by(across(c(seniority, academic_degree, sex))) |>
  summarise(count = n(), .groups = 'drop')
```

-   Example 2

Lab 4 Question 5

```{r}
#| label: dvs-5-2
ca_childcare |>
  filter(study_year %in% c("2018")) |>
  select(region, study_year, mc_infant) |>
  group_by(region) |>
  summarise(mc_infant = median(mc_infant, na.rm = TRUE))
```

**DVS-6: I can create tables which make my summaries clear to the reader.**

-   Example 1

Challenge 9 Lab 8 Question 3

```{r}
#| label: dvs-6-1

# Remove duplicates based on each professor's key attributes
clean_evals |>
  distinct(teacher_id, sex, academic_degree, seniority) |>
# Create categories and count each category
  mutate(
    seniority = as.numeric(as.character(seniority)),  # Convert seniority to numeric
    seniority_category = ifelse(seniority <= 4, "Junior", "Senior"),
    degree_category = case_when(
      academic_degree == "no_dgr" ~ "No Degree",
      academic_degree == "ma" ~ "Masters",
      academic_degree == "dr" ~ "Doctorate",
      academic_degree == "prof" ~ "Professor"
    )
  ) |>
  summarise(
    Female = sum(sex == "female"),
    Male = sum(sex == "male"),
    Junior = sum(seniority_category == "Junior"),
    Senior = sum(seniority_category == "Senior"),
    `No Degree` = sum(degree_category == "No Degree"),
    Masters = sum(degree_category == "Masters"),
    Doctorate = sum(degree_category == "Doctorate"),
    Professor = sum(degree_category == "Professor")
  ) |>
# Create a formatted table
kable(
  caption = "Summary of Teacher Categories and Counts", 
  col.names = c("Female", "Male", "Junior", "Senior", 
                "No Degree", "Masters", "Doctorate", "Professor"),
  align = "l"
) |> 
  kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover", "condensed"))
```

-   Example 2

Challenge 9 Question 2

```{r}
#| label: dvs-6-2
results_df <- enframe(results, 
        name = "simulation_number", 
        value = "ncorrect") |>
  count(ncorrect, name = "count") |>
  mutate(proportion = count / sum(count))

# Create a formatted table using the gt package
results_df |> 
  gt() |> 
  # Add a title and subtitle
  tab_header(
    title = "Simulation Results Summary",
    subtitle = "Proportions of Correct Simulations"
  ) |> 
  # Format the `proportion` column as percentages
  fmt_percent(
    columns = proportion, 
    decimals = 2
  ) |> 
  # Add row striping
  tab_style(
    style = cell_fill(color = "lightgray"),
    locations = cells_body(rows = seq(1, nrow(results_df), by = 2))
  ) |> 
  # Add borders to the table
  tab_options(
    table.border.top.color = "black",
    table.border.bottom.color = "black",
    heading.align = "center"
  ) |> 
  # Adjust font size
  tab_options(
    table.font.size = px(14)
  ) |> 
  # Configure custom column labels
  cols_label(
    ncorrect = "Correct Simulations",
    count = "Count of Occurrences",
    proportion = "Proportion (%)"
  )
```

**DVS-7: I show creativity in my tables.**

-   Example 1

Challenge 9 Lab 8 Question 3

*I added colors to the table to make the table pop more.*

```{r}
#| label: dvs-7-1

# Summarizing teacher categories and creating an elegant table
library(dplyr)
library(knitr)
library(kableExtra)

clean_evals |>
  # Remove duplicates based on teacher attributes
  distinct(teacher_id, sex, academic_degree, seniority) |>
  # Create categories for seniority and academic degrees
  mutate(
    seniority = as.numeric(as.character(seniority)),
    seniority_category = ifelse(seniority <= 4, "Junior", "Senior"),
    degree_category = case_when(
      academic_degree == "no_dgr" ~ "No Degree",
      academic_degree == "ma" ~ "Masters",
      academic_degree == "dr" ~ "Doctorate",
      academic_degree == "prof" ~ "Professor"
    )
  ) |>
  # Summarise counts for each category
  summarise(
    Female = sum(sex == "female"),
    Male = sum(sex == "male"),
    Junior = sum(seniority_category == "Junior"),
    Senior = sum(seniority_category == "Senior"),
    `No Degree` = sum(degree_category == "No Degree"),
    Masters = sum(degree_category == "Masters"),
    Doctorate = sum(degree_category == "Doctorate"),
    Professor = sum(degree_category == "Professor")
  ) |>
  # Create a formatted table with enhanced styling
  kable(
    caption = "Summary of Teacher Categories and Counts",
    col.names = c("Female", "Male", "Junior", "Senior",
                  "No Degree", "Masters", "Doctorate", "Professor"),
    align = c("c", "c", "c", "c", "c", "c", "c", "c")
  ) |>
  kable_styling(
    bootstrap_options = c("striped", "hover", "condensed", "responsive"),
    full_width = FALSE,
    position = "center"
  ) |>
  add_header_above(c(" " = 2, "Seniority" = 2, "Academic Degrees" = 4)) |>
  row_spec(0, bold = TRUE, color = "white", background = "#0073C2") |>
  column_spec(1, bold = TRUE, background = "#f7f7f7")

```

-   Example 2

Challenge 9 Question 2

*I tried to make this able as close to those found in the academic Journals I read such as 'Composite Part B and 'Polymer Composites' . * 

```{r}
#| label: dvs-7-2

results_df <- enframe(results, 
        name = "simulation_number", 
        value = "ncorrect") |>
  count(ncorrect, name = "count") |>
  mutate(proportion = count / sum(count))

# Create a formatted table using the gt package
results_df |> 
  gt() |> 
  # Add a title and subtitle
  tab_header(
    title = "Simulation Results Summary",
    subtitle = "Proportions of Correct Simulations"
  ) |> 
  # Format the `proportion` column as percentages
  fmt_percent(
    columns = proportion, 
    decimals = 2
  ) |> 
  # Add row striping
  tab_style(
    style = cell_fill(color = "lightgray"),
    locations = cells_body(rows = seq(1, nrow(results_df), by = 2))
  ) |> 
  # Add borders to the table
  tab_options(
    table.border.top.color = "black",
    table.border.bottom.color = "black",
    heading.align = "center"
  ) |> 
  # Adjust font size
  tab_options(
    table.font.size = px(14)
  ) |> 
  # Configure custom column labels
  cols_label(
    ncorrect = "Correct Simulations",
    count = "Count of Occurrences",
    proportion = "Proportion (%)"
  )
```

## Program Efficiency

**PE-1: I can write concise code which does not repeat itself.**

-   using a single function call with multiple inputs (rather than multiple function calls)

Lab 3 Question 5

```{r}
#| label: pe-1-one-call
teacher_evals_clean <- teacher_evals |>
  rename("sex" = "gender") |>
  filter(no_participants >= 10) |>
  select(course_id,
         teacher_id,
         question_no,
         no_participants,
         resp_share,
         SET_score_avg,
         percent_failed_cur,
         academic_degree,
         seniority,
         sex) |>
  mutate(teacher_id = as.integer(teacher_id))
```

-   `across()`

Lab 3 Question 7

*I modified my code to use the across function. Using the across() function makes my code more streamline and efficient.*

```{r}
#| label: pe-1-across
teacher_evals_clean |> 
  filter(across(everything(), is.na))
```

-   `map()` functions

Lab 8 Question 1

```{r}
#| label: pe-1-map-1

tibble(column = names(surveys), 
       class_type = map_chr(.x = surveys, .f = class)) |> 
  pivot_wider(names_from = column, 
              values_from = class_type)
```

**PE-2: I can write functions to reduce repetition in my code.**

-   Function that operates on vectors

Lab 7 Question 4

```{r}
#| label: pe-2-1

rescale_01 <- function(input_vector) {
  # Check if the input vector is numeric
  if (!is.numeric(input_vector)) {
    stop("Error: The input vector must be numeric.")
  }
  
  # Check if the length of the input vector is greater than 1
  if (length(input_vector) <= 1) {
    stop("Error: The input vector must have more than one element.")
  }
  # Get the range of the input vector (min and max values)
  min_max <- range(input_vector, na.rm = TRUE)
  # Calculate the normalized vector using the range
  normalized_vector <- (input_vector - min_max[1]) / (min_max[2] - min_max[1])
  return(normalized_vector)
}
```

-   Function that operates on data frames

Lab 7 Question 8

```{r}
#| label: pe-2-2

rescale_column <- function(df, var_names) {
  
  # check is input is a date frame
  stopifnot(is.data.frame(df))
  
  df |> 
    mutate(
      across(
        .cols = {{var_names}},
        .fns = ~ rescale_01(.),
        .names = "{.col}"
      )
    )
}
```

**PE-3:I can use iteration to reduce repetition in my code.**

-   `across()`

Lab 7 Question 8

```{r}
#| label: pe-3-across

rescale_column <- function(df, var_names) {
  
  # check is input is a date frame
  stopifnot(is.data.frame(df))
  
  df |> 
    mutate(
      across(
        .cols = {{var_names}},
        .fns = ~ rescale_01(.),
        .names = "{.col}"
      )
    )
}

```

-   `map()` function with **one** input (e.g., `map()`, `map_chr()`, `map_dbl()`, etc.)

Lab 8 Question 2

```{r}
#| label: pe-3-map-1

clean_evals <- bind_cols(map_at(.x  = evals,
                   .at = c("teacher_id",
                           "weekday",
                           "academic_degree",
                           "seniority",
                           "sex"),
                   .f = as.factor
                  )
            )
# Show that the variables are factors
map_chr(.x = clean_evals, .f = class)
```

-   `map()` function with **more than one** input (e.g., `map_2()` or `pmap()`)

Lab 9 Question 6

```{r}
#| label: pe-3-map-2

all_simulations <- grid |> 
  mutate(simulated_means = pmap(.l = list(n = n, df = df), 
                                .f = simulate_means)
         ) |> 
  unnest(simulated_means) 
```

**PE-4: I can use modern tools when carrying out my analysis.**

-   I can use functions which are not superseded or deprecated

Lab 5 Question Crime Scene Report

```{r}
#| label: pe-4-1
get_fit_now_member |>
  filter(str_detect(id, "^48Z"),
         membership_status == "gold")
```

-   I can connect a data wrangling pipeline into a `ggplot()`

Lab 4 Question 6

```{r}
#| label: pe-4-2
ca_childcare |>
  select(region, study_year, mc_infant, mc_toddler, mc_preschool) |>
  rename("California Region" = region) |>
  pivot_longer(cols = starts_with("mc_"),
               names_to = "age_group",
               values_to = "median_cost") |>
  mutate(age_group = fct_relevel(fct_recode(age_group,
                                          "Infant" = "mc_infant",
                                          "Toddler" = "mc_toddler",
                                          "Preschool" = "mc_preschool"),
                                "Infant",
                                "Toddler",
                                "Preschool")) |>
  mutate(`California Region` = fct_relevel(`California Region`,
                              "San Francisco Bay Area",
                              "Orange County",
                              "Los Angeles County",
                              "Northern San Joaquin Valley",
                              "Central Coast",
                              "Inland Empire",
                              "Superior California",
                              "Southern San Joaquin Valley",
                              "San Diego-Imperial",
                              "North Coast")) |>
  ggplot(mapping = aes(x = study_year,
                           y = median_cost,
                           color = `California Region`)) +
  geom_point(size = 0.5) +
  geom_smooth(linewidth = 0.5) +
  facet_wrap(~ age_group,
             labeller = label_value) +
  labs(subtitle = "Weekly Median Price for Center-Based Childcare ($)",
       x = "Study Year",
       y = "") +
  scale_x_continuous(breaks = seq(2008, 2018, by = 2),
                     minor_breaks = seq(2008, 2018, by = 1),
                     limits = c(2008, 2018)) +
  scale_y_continuous(breaks = seq(100, 500, by = 100),
                     minor_breaks = seq(100, 500, by = 50),
                     limits = c(100, 500)) +
  theme(
    aspect.ratio = 1, 
    axis.text.x = element_text(size = 6),
    axis.text.y = element_text(size = 6),
  )
```

## Data Simulation & Statisical Models

**DSSM-1: I can simulate data from a *variety* of probability models.**

-   Example 1

Lab 9 Question 1-2

```{r}
#| label: dsm-1-1

randomBabies <- function(nBabies) {
  # Create a vector representing the parents
  parents <- 1:nBabies
  
  # Shuffle the babies randomly
  babies <- sample(parents)
  
  # Count how many babies are correctly returned
  sum(parents == babies)
}

# Use map_int() to simulate 10,000 times
results <- map_int(.x = 1:10000,
                   .f = ~ randomBabies(nBabies = 4))
results_df <- enframe(results, 
        name = "simulation_number", 
        value = "ncorrect") |>
  count(ncorrect, name = "count") |>
  mutate(proportion = count / sum(count))
results_df
```

-   Example 2

Lab 9 Question 4-7

```{r}
#| label: dsm-1-2

simulate_means <- function(n, df){
  map_dbl(.x = 1:n, 
          .f = ~ rchisq(n = 100, df = df) %>% mean()
          )
}
grid <- crossing(n = c(10, 100, 1000, 10000), 
                 df = 10)
all_simulations <- grid |> 
  mutate(simulated_means = pmap(.l = list(n = n, df = df), 
                                .f = simulate_means)
         ) |> 
  unnest(simulated_means) 
all_simulations |>
  group_by(n) |>
  summarise(Mean = mean(simulated_means),
            .groups = 'drop') |>
  pivot_wider(id_cols = everything(),
              names_from = n,
              values_from = Mean) |>
  rename('Simulated Means = 10' = '10',
         'Simulated Means = 100' = '100',
         'Simulated Means = 1000' = '1000',
         'Simulated Means = 10000' = '10000')
```

**DSSM-2: I can conduct common statistical analyses in R.**

-   Example 1

Lab 4 Question 8

*revision. I had the variables flipped. It is important to feed the lm function the correct valuables in the manner that it expects it or it will return data that may look correct but isn't which is misleading if the data where to be published.*

```{r}
#| label: dsm-2-1
reg_mod1 <- lm(mc_infant ~ mhi_2018, data = ca_childcare)
summary(reg_mod1)
```

-   Example 2

Lab 1 Question 12

*I updated the code to reference the columns in the function call.*

```{r}
#| label: dsm-2-2
# Perform the t-test using the ToothGrowth dataset
testResults <- t.test(len ~ supp, 
                      data = ToothGrowth, 
                      alternative = "two.sided", 
                      var.equal = FALSE)

# Display the test results
print(testResults)
```

## Revising My Thinking

<!-- How did you revise your thinking throughout the course? How did you revise your thinking on the code examples you have provided in your portfolio? -->

I was able to revise my thinking via the revision that we were able to resubmit throughout the course. Once I received feedback, I would take a minute to internalize what the feedback was providing to me. Then I would do my best to apply the feedback to my code to improve it by making it more efficient or tidy. When I code, there are infinite ways to accomplish a task. But while working on my portfolio, I got to think about different ways I could have executed my code. And in doing so, some of the new ways I discovered made my code better / more efficient.

<!-- For the revisions included in your Portfolio, to help me understand the nature of your revisions, please denote somehow the feedback I provided you (e.g., boldface, italics, colored text) before your revisions. -->

I noted this by making the text *italicized*

## Extending My Thinking

<!-- How did you extended your thinking throughout the course? How did you extend your thinking on the code examples you have provided in your portfolio? -->

I extended my thinking as much as I could be doing all the challenge activities. These push me to look into more of the specifics of how to use R. For example created the plot in challenge 2 really taught me how to use ggplot and get the most out of it to customize a plot to be exactly as I want it. Additionally, the challenge activities made me more comfortable with R as a language; so when I use it in the future, I already have the knowledge to apply what I've learned by doing the challenge activities.

## Peer Support & Collaboration

<!-- Include an image or a description of feedback you gave that you are proud of (either in a peer review or in Discord). -->

"Hi Eva, great job being very efficient with you code. For the most part you use one function to output all the necessary values. One recommendation I have is sometimes you don't need to store your manipulation in a variable, you can just have it outputted instead of using print(). You also did a great job with writing tidy code. I like your use of comment for almost every line - it makes it super easy to read. you were also consistent with variable spacing. One recommendation would be to use named attributed in all locations. otherwise, great job!" Christopher John Hawkins , Oct 20 at 1:01pm Lab 3 Code Review.

<!-- Include a description of how you grew as a collaborator through the weekly pair programming activities.   -->

Through collaborating with the weekly programming activities, I learned how to better communicate about code to others. At first I had a hard time getting my thoughts and ideas across. But as I had more and more opportunists to try, I eventually got better and now my partner and I are able to bounce ideas off each other and work very effectively. I also learned to understand what other people are trying to convey and translate those ideas into code. This helped me grew because not only did I learn how to efficiently develop code as a team, but also learn about new ways of thinking about the code and different techniques that I can incorporate into my own code.
